// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Music.proto

#ifndef PROTOBUF_Music_2eproto__INCLUDED
#define PROTOBUF_Music_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PBMusic;
class PBMusicDefaultTypeInternal;
extern PBMusicDefaultTypeInternal _PBMusic_default_instance_;

namespace protobuf_Music_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Music_2eproto

// ===================================================================

class PBMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBMusic) */ {
 public:
  PBMusic();
  virtual ~PBMusic();

  PBMusic(const PBMusic& from);

  inline PBMusic& operator=(const PBMusic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMusic& default_instance();

  static inline const PBMusic* internal_default_instance() {
    return reinterpret_cast<const PBMusic*>(
               &_PBMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PBMusic* other);

  // implements Message ----------------------------------------------

  inline PBMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  PBMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBMusic& from);
  void MergeFrom(const PBMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBMusic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string album = 3;
  void clear_album();
  static const int kAlbumFieldNumber = 3;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // string artist = 4;
  void clear_artist();
  static const int kArtistFieldNumber = 4;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // string path = 5;
  void clear_path();
  static const int kPathFieldNumber = 5;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string duration = 6;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string albumUri = 7;
  void clear_albumuri();
  static const int kAlbumUriFieldNumber = 7;
  const ::std::string& albumuri() const;
  void set_albumuri(const ::std::string& value);
  #if LANG_CXX11
  void set_albumuri(::std::string&& value);
  #endif
  void set_albumuri(const char* value);
  void set_albumuri(const char* value, size_t size);
  ::std::string* mutable_albumuri();
  ::std::string* release_albumuri();
  void set_allocated_albumuri(::std::string* albumuri);

  // @@protoc_insertion_point(class_scope:PBMusic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr albumuri_;
  mutable int _cached_size_;
  friend struct protobuf_Music_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PBMusic

// string id = 1;
inline void PBMusic::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::id() const {
  // @@protoc_insertion_point(field_get:PBMusic.id)
  return id_.GetNoArena();
}
inline void PBMusic::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.id)
}
#if LANG_CXX11
inline void PBMusic::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.id)
}
#endif
inline void PBMusic::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.id)
}
inline void PBMusic::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.id)
}
inline ::std::string* PBMusic::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_id() {
  // @@protoc_insertion_point(field_release:PBMusic.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.id)
}

// string title = 2;
inline void PBMusic::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::title() const {
  // @@protoc_insertion_point(field_get:PBMusic.title)
  return title_.GetNoArena();
}
inline void PBMusic::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.title)
}
#if LANG_CXX11
inline void PBMusic::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.title)
}
#endif
inline void PBMusic::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.title)
}
inline void PBMusic::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.title)
}
inline ::std::string* PBMusic::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_title() {
  // @@protoc_insertion_point(field_release:PBMusic.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.title)
}

// string album = 3;
inline void PBMusic::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::album() const {
  // @@protoc_insertion_point(field_get:PBMusic.album)
  return album_.GetNoArena();
}
inline void PBMusic::set_album(const ::std::string& value) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.album)
}
#if LANG_CXX11
inline void PBMusic::set_album(::std::string&& value) {
  
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.album)
}
#endif
inline void PBMusic::set_album(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.album)
}
inline void PBMusic::set_album(const char* value, size_t size) {
  
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.album)
}
inline ::std::string* PBMusic::mutable_album() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_album() {
  // @@protoc_insertion_point(field_release:PBMusic.album)
  
  return album_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_album(::std::string* album) {
  if (album != NULL) {
    
  } else {
    
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.album)
}

// string artist = 4;
inline void PBMusic::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::artist() const {
  // @@protoc_insertion_point(field_get:PBMusic.artist)
  return artist_.GetNoArena();
}
inline void PBMusic::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.artist)
}
#if LANG_CXX11
inline void PBMusic::set_artist(::std::string&& value) {
  
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.artist)
}
#endif
inline void PBMusic::set_artist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.artist)
}
inline void PBMusic::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.artist)
}
inline ::std::string* PBMusic::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_artist() {
  // @@protoc_insertion_point(field_release:PBMusic.artist)
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.artist)
}

// string path = 5;
inline void PBMusic::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::path() const {
  // @@protoc_insertion_point(field_get:PBMusic.path)
  return path_.GetNoArena();
}
inline void PBMusic::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.path)
}
#if LANG_CXX11
inline void PBMusic::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.path)
}
#endif
inline void PBMusic::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.path)
}
inline void PBMusic::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.path)
}
inline ::std::string* PBMusic::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_path() {
  // @@protoc_insertion_point(field_release:PBMusic.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.path)
}

// string duration = 6;
inline void PBMusic::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::duration() const {
  // @@protoc_insertion_point(field_get:PBMusic.duration)
  return duration_.GetNoArena();
}
inline void PBMusic::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.duration)
}
#if LANG_CXX11
inline void PBMusic::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.duration)
}
#endif
inline void PBMusic::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.duration)
}
inline void PBMusic::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.duration)
}
inline ::std::string* PBMusic::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_duration() {
  // @@protoc_insertion_point(field_release:PBMusic.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.duration)
}

// string albumUri = 7;
inline void PBMusic::clear_albumuri() {
  albumuri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBMusic::albumuri() const {
  // @@protoc_insertion_point(field_get:PBMusic.albumUri)
  return albumuri_.GetNoArena();
}
inline void PBMusic::set_albumuri(const ::std::string& value) {
  
  albumuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBMusic.albumUri)
}
#if LANG_CXX11
inline void PBMusic::set_albumuri(::std::string&& value) {
  
  albumuri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBMusic.albumUri)
}
#endif
inline void PBMusic::set_albumuri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  albumuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBMusic.albumUri)
}
inline void PBMusic::set_albumuri(const char* value, size_t size) {
  
  albumuri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBMusic.albumUri)
}
inline ::std::string* PBMusic::mutable_albumuri() {
  
  // @@protoc_insertion_point(field_mutable:PBMusic.albumUri)
  return albumuri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBMusic::release_albumuri() {
  // @@protoc_insertion_point(field_release:PBMusic.albumUri)
  
  return albumuri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBMusic::set_allocated_albumuri(::std::string* albumuri) {
  if (albumuri != NULL) {
    
  } else {
    
  }
  albumuri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), albumuri);
  // @@protoc_insertion_point(field_set_allocated:PBMusic.albumUri)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Music_2eproto__INCLUDED
